{"remainingRequest":"C:\\Users\\terme\\Documents\\GitHub\\readit-example\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\terme\\Documents\\GitHub\\readit-example\\src\\components\\UpdateTopic.vue?vue&type=style&index=0&id=01644e28&prod&lang=css","dependencies":[{"path":"C:\\Users\\terme\\Documents\\GitHub\\readit-example\\src\\components\\UpdateTopic.vue","mtime":1752853256142},{"path":"C:\\Users\\terme\\Documents\\GitHub\\readit-example\\node_modules\\css-loader\\dist\\cjs.js","mtime":1752810157558},{"path":"C:\\Users\\terme\\Documents\\GitHub\\readit-example\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1752810158948},{"path":"C:\\Users\\terme\\Documents\\GitHub\\readit-example\\node_modules\\postcss-loader\\src\\index.js","mtime":1752810157001},{"path":"C:\\Users\\terme\\Documents\\GitHub\\readit-example\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1752810157864},{"path":"C:\\Users\\terme\\Documents\\GitHub\\readit-example\\node_modules\\vue-loader\\lib\\index.js","mtime":1752810158306}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQovKiBBZGQgc29tZSBiYXNpYyBzdHlsZXMgZm9yIHRoZSBmb3JtICovDQpmb3JtIHsNCiAgbWFyZ2luLXRvcDogMjBweDsNCiAgcGFkZGluZzogMjBweDsNCiAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpOw0KICBib3JkZXItcmFkaXVzOiAxMHB4Ow0KICBib3gtc2hhZG93OiAwIDRweCA2cHggcmdiYSgwLCAwLCAwLCAwLjEpOw0KfQ0KDQouZmllbGQgew0KICBtYXJnaW4tYm90dG9tOiAxNXB4Ow0KfQ0KDQouZmllbGQgbGFiZWwgew0KICBkaXNwbGF5OiBibG9jazsNCiAgbWFyZ2luLWJvdHRvbTogNXB4Ow0KICBmb250LXdlaWdodDogYm9sZDsNCiAgY29sb3I6ICMzMzM7DQp9DQoNCi5maWVsZCBpbnB1dFt0eXBlPSJ0ZXh0Il0gew0KICB3aWR0aDogMTAwJTsNCiAgcGFkZGluZzogMTBweDsNCiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjIpOw0KICBib3JkZXItcmFkaXVzOiA1cHg7DQogIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC44KTsNCiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogRW5zdXJlcyBwYWRkaW5nIGRvZXNuJ3QgaW5jcmVhc2Ugd2lkdGggKi8NCn0NCg0KLmFjdGlvbnMgew0KICB0ZXh0LWFsaWduOiByaWdodDsNCn0NCg0KLmFjdGlvbnMgYnV0dG9uIHsNCiAgcGFkZGluZzogMTBweCAyMHB4Ow0KICBib3JkZXI6IG5vbmU7DQogIGJvcmRlci1yYWRpdXM6IDVweDsNCiAgY3Vyc29yOiBwb2ludGVyOw0KICBmb250LXNpemU6IDE2cHg7DQogIG1hcmdpbi1sZWZ0OiAxMHB4Ow0KfQ0KDQouYWN0aW9ucyBidXR0b25bdHlwZT0ic3VibWl0Il0gew0KICBiYWNrZ3JvdW5kLWNvbG9yOiAjNENBRjUwOyAvKiBHcmVlbiAqLw0KICBjb2xvcjogd2hpdGU7DQp9DQoNCi5hY3Rpb25zIGJ1dHRvblt0eXBlPSJzdWJtaXQiXTpob3ZlciB7DQogIGJhY2tncm91bmQtY29sb3I6ICM0NWEwNDk7DQp9DQoNCi5hY3Rpb25zIGJ1dHRvblt0eXBlPSJidXR0b24iXSB7IC8qIEZvciB0aGUgQ2FuY2VsIGJ1dHRvbiAqLw0KICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjQ0MzM2OyAvKiBSZWQgKi8NCiAgY29sb3I6IHdoaXRlOw0KfQ0KDQouYWN0aW9ucyBidXR0b25bdHlwZT0iYnV0dG9uIl06aG92ZXIgew0KICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGExOTBiOw0KfQ0K"},{"version":3,"sources":["UpdateTopic.vue"],"names":[],"mappings":";AA2FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"UpdateTopic.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <form v-on:submit.prevent=\"updateTopic\"> <div class=\"field\">\r\n      <label for=\"title\">Title</label>\r\n      <input type=\"text\" id=\"title\" v-model=\"title\" /> </div>\r\n    <div class=\"actions\">\r\n      <button type=\"submit\">Save Document</button>\r\n      <button type=\"button\" @click=\"cancel\">Cancel</button> </div>\r\n  </form>\r\n</template>\r\n\r\n<script>\r\n// REMOVE THIS IMPORT - No longer using external service\r\n// import topicService from \"@/services/TopicService.js\";\r\n\r\nimport { mapState, mapActions } from 'vuex'; // Import mapState and mapActions\r\n\r\nexport default {\r\n  // Your name here is 'create-topic', but it's handling updates.\r\n  // Consider renaming the component file and this property to 'edit-topic'\r\n  // or 'update-topic' for clarity if it's strictly for editing.\r\n  name: \"edit-topic\", // Renamed for clarity based on functionality\r\n  props: {\r\n    // router/index.js currently uses ':id' for EditTopic.\r\n    // Ensure this prop name matches the route param name.\r\n    id: [Number, String] // Changed from 'topicID' to 'id' to match router param\r\n  },\r\n  data() {\r\n    return {\r\n      title: \"\"\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapState(['topics']) // We need access to the topics array to find the topic by ID\r\n  },\r\n  methods: {\r\n    ...mapActions(['updateTheTopic']), // Map the new updateTheTopic action\r\n\r\n    updateTopic() {\r\n      const updatedTopic = { id: this.id, title: this.title }; // Use this.id (from prop)\r\n\r\n      // Dispatch the Vuex action to update the topic in the store\r\n      this.updateTheTopic(updatedTopic)\r\n        .then(() => {\r\n          // After successful update in the store, redirect\r\n          this.$router.push({ name: 'Messages', params: { topicId: this.id } }); // Redirect to topic details\r\n          // Or redirect to Home: this.$router.push(\"/\");\r\n        })\r\n        .catch(error => {\r\n          console.error(\"Error updating topic:\", error);\r\n          // Handle error, e.g., show a user message\r\n        });\r\n    },\r\n    cancel() {\r\n      // Go back to the previous page or home\r\n      this.$router.back();\r\n    }\r\n  },\r\n  watch: {\r\n    // Watch the 'id' prop to load the topic when it changes or on initial creation\r\n    id: {\r\n      immediate: true, // This makes the watcher run immediately when the component is created\r\n      handler(newId) {\r\n        if (newId && this.topics.length > 0) { // Ensure topics are loaded before searching\r\n          const topicToEdit = this.topics.find(t => t.id == newId); // Find the topic by its ID\r\n\r\n          if (topicToEdit) {\r\n            this.title = topicToEdit.title; // Populate the form field\r\n          } else {\r\n            console.warn(`Topic with ID ${newId} not found in store for editing.`);\r\n            this.$router.push(\"/not-found\"); // Redirect if topic not found\r\n          }\r\n        }\r\n      }\r\n    },\r\n    // Also watch the 'topics' state as a fallback, in case topics array loads after the component\r\n    topics: {\r\n      immediate: true,\r\n      handler(newTopics) {\r\n        if (newTopics.length > 0 && this.id && !this.title) { // Only try to set if title is not already set\r\n          const topicToEdit = newTopics.find(t => t.id == this.id);\r\n          if (topicToEdit) {\r\n            this.title = topicToEdit.title;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n/* Add some basic styles for the form */\r\nform {\r\n  margin-top: 20px;\r\n  padding: 20px;\r\n  background: rgba(255, 255, 255, 0.2);\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.field {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.field label {\r\n  display: block;\r\n  margin-bottom: 5px;\r\n  font-weight: bold;\r\n  color: #333;\r\n}\r\n\r\n.field input[type=\"text\"] {\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid rgba(0, 0, 0, 0.2);\r\n  border-radius: 5px;\r\n  background: rgba(255, 255, 255, 0.8);\r\n  box-sizing: border-box; /* Ensures padding doesn't increase width */\r\n}\r\n\r\n.actions {\r\n  text-align: right;\r\n}\r\n\r\n.actions button {\r\n  padding: 10px 20px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  margin-left: 10px;\r\n}\r\n\r\n.actions button[type=\"submit\"] {\r\n  background-color: #4CAF50; /* Green */\r\n  color: white;\r\n}\r\n\r\n.actions button[type=\"submit\"]:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.actions button[type=\"button\"] { /* For the Cancel button */\r\n  background-color: #f44336; /* Red */\r\n  color: white;\r\n}\r\n\r\n.actions button[type=\"button\"]:hover {\r\n  background-color: #da190b;\r\n}\r\n</style>"]}]}